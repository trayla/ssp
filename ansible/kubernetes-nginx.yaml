- hosts: console
  become: yes
  vars_files:
  - /opt/mgmt/values-ssp.yaml
  tasks:

  # Install the NGINX web proxy via it's officially supported Helm package

  - name: Install prerequisites of the NGINX ingress
    shell: "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-{{ platform.assets.nginx.version }}/deploy/static/mandatory.yaml"

  - name: Install the NGINX Helm package
    shell: "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-{{ platform.assets.nginx.version }}/deploy/static/provider/baremetal/service-nodeport.yaml"

  - name: Wait for the Nginx service to come up
    shell: kubectl -n ingress-nginx get svc ingress-nginx
    register: result
    until: result.stdout.find("NodePort") != -1
    retries: 100
    delay: 10

  # Install Cert Manager

  - name: Create the Cert Manager namespace
    shell: kubectl create namespace certmgr

  - name: Disable the automatic validation feature on the Cert Manager namespace
    shell: kubectl label namespace certmgr certmanager.k8s.io/disable-validation="true"

  - name: Add the Jetstack Helm repository
    shell: |
      helm repo add jetstack https://charts.jetstack.io
      helm repo update

  - name: Install the Cert Manager via it's Helm package
    shell: |
      helm install certmanager jetstack/cert-manager \
        --namespace certmgr \
        --version {{ platform.assets.certmanager.version }} \
        --set installCRDs=true \
        --set ingressShim.defaultIssuerKind=ClusterIssuer,ingressShim.defaultIssuerName=letsencrypt-production,ingressShim.defaultACMEChallengeType=http01

  - name: Wait for the Cert Manager to come up
    shell: kubectl get pods --namespace certmgr
    register: result
    until: (result.stdout | regex_findall("Running") | length) == 3
    retries: 100
    delay: 10

  - name: Wait some more time
    wait_for:
      timeout: 30

  - name: Create the LetsEncrypt staging cluster issuer
    shell: |
      cat <<EOF | kubectl create -f -
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        labels:
          name: letsencrypt-staging
        name: letsencrypt-staging
      spec:
        acme:
          email: {{ platform.email }}
          privateKeySecretRef:
            name: clusterissuer-letsencrypt-staging
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          solvers:
            - http01:
                ingress:
                  class: nginx
      EOF

  - name: Create the LetsEncrypt production cluster issuer
    shell: |
      cat <<EOF | kubectl create -f -
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        labels:
          name: letsencrypt-production
        name: letsencrypt-production
      spec:
        acme:
          email: {{ platform.email }}
          privateKeySecretRef:
            name: clusterissuer-letsencrypt-production
          server: https://acme-v02.api.letsencrypt.org/directory
          solvers:
            - http01:
                ingress:
                  class: nginx
      EOF

  # Deploy the Echo service

  - name: Create an authorization secret for the Echo app
    shell: htpasswd -b -c /tmp/auth admin {{ platform.admin.password }} && kubectl -n ssp-base create secret generic basic-auth --from-file=/tmp/auth && rm /tmp/auth

  - name: Deploy the Echo app
    shell: |
      cat <<EOF | kubectl create -f -
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        namespace: ssp-base
        name: echo
      spec:
        selector:
          matchLabels:
            app: echo
        replicas: 1
        template:
          metadata:
            labels:
              app: echo
          spec:
            containers:
            - name: echo
              image: hashicorp/http-echo
              args:
              - "-text=You made it!"
              ports:
              - containerPort: 5678
      ---
      apiVersion: v1
      kind: Service
      metadata:
        namespace: ssp-base
        name: echo
      spec:
        ports:
        - port: 80
          targetPort: 5678
        selector:
          app: echo
      ---
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        namespace: ssp-base
        name: echo
        annotations:  
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: basic-auth
          nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
      spec:
        tls:
        - hosts:
          - echo.ssp.{{ platform.domain }}
          secretName: echo-tls
        rules:
        - host: echo.ssp.{{ platform.domain }}
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: echo
                  port:
                    number: 80
      EOF

# Trust the Let's Encrypt staging CA on all nodes
- hosts: all
  become: yes
  tasks:

  # Download the Let's Encrypt staging certificate to each Kubernetes node
  - name: Download the Let's Encrypt staging certificate to each Kubernetes node
    get_url:
      url: https://letsencrypt.org/certs/fakelerootx1.pem
      dest: /etc/ssl/certs/fakelerootx1.pem
      mode: '0666'

  # Refresh the trusted authorities
  - name: Register the trusted authorities
    shell: update-ca-certificates --fresh
